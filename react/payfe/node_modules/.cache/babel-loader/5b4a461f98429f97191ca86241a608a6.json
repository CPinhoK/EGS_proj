{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar Sort = {\n  Numeric: function Numeric(a, b) {\n    var valA = parseFloat(a.toString().replace(/,/g, ''));\n    var valB = parseFloat(b.toString().replace(/,/g, '')); // Sort non-numeric values alphabetically at the bottom of the list\n\n    if (isNaN(valA) && isNaN(valB)) {\n      valA = a;\n      valB = b;\n    } else {\n      if (isNaN(valA)) {\n        return 1;\n      }\n\n      if (isNaN(valB)) {\n        return -1;\n      }\n    }\n\n    if (valA < valB) {\n      return -1;\n    }\n\n    if (valA > valB) {\n      return 1;\n    }\n\n    return 0;\n  },\n  NumericInteger: function NumericInteger(a, b) {\n    if (isNaN(a) || isNaN(b)) {\n      return a > b ? 1 : -1;\n    }\n\n    return a - b;\n  },\n  Currency: function Currency(a, b) {\n    // Parse out dollar signs, then do a regular numeric sort\n    a = a.replace(/[^0-9\\.\\-\\,]+/g, '');\n    b = b.replace(/[^0-9\\.\\-\\,]+/g, '');\n    return exports.Sort.Numeric(a, b);\n  },\n  Date: function (_Date) {\n    function Date(_x, _x2) {\n      return _Date.apply(this, arguments);\n    }\n\n    Date.toString = function () {\n      return _Date.toString();\n    };\n\n    return Date;\n  }(function (a, b) {\n    // Note: this function tries to do a standard javascript string -> date conversion\n    // If you need more control over the date string format, consider using a different\n    // date library and writing your own function\n    var valA = Date.parse(a);\n    var valB = Date.parse(b); // Handle non-date values with numeric sort\n    // Sort non-numeric values alphabetically at the bottom of the list\n\n    if (isNaN(valA) || isNaN(valB)) {\n      return exports.Sort.Numeric(a, b);\n    }\n\n    if (valA > valB) {\n      return 1;\n    }\n\n    if (valB > valA) {\n      return -1;\n    }\n\n    return 0;\n  }),\n  CaseInsensitive: function CaseInsensitive(a, b) {\n    return a.toLowerCase().localeCompare(b.toLowerCase());\n  }\n};\nexports.Sort = Sort;","map":{"version":3,"sources":["C:/Users/Paulo Pinho/Desktop/EGS/react/node_modules/reactable/lib/reactable/sort.js"],"names":["Object","defineProperty","exports","value","Sort","Numeric","a","b","valA","parseFloat","toString","replace","valB","isNaN","NumericInteger","Currency","Date","_Date","_x","_x2","apply","arguments","parse","CaseInsensitive","toLowerCase","localeCompare"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Sort = {\n    Numeric: function Numeric(a, b) {\n        var valA = parseFloat(a.toString().replace(/,/g, ''));\n        var valB = parseFloat(b.toString().replace(/,/g, ''));\n\n        // Sort non-numeric values alphabetically at the bottom of the list\n        if (isNaN(valA) && isNaN(valB)) {\n            valA = a;\n            valB = b;\n        } else {\n            if (isNaN(valA)) {\n                return 1;\n            }\n            if (isNaN(valB)) {\n                return -1;\n            }\n        }\n\n        if (valA < valB) {\n            return -1;\n        }\n        if (valA > valB) {\n            return 1;\n        }\n\n        return 0;\n    },\n\n    NumericInteger: function NumericInteger(a, b) {\n        if (isNaN(a) || isNaN(b)) {\n            return a > b ? 1 : -1;\n        }\n\n        return a - b;\n    },\n\n    Currency: function Currency(a, b) {\n        // Parse out dollar signs, then do a regular numeric sort\n        a = a.replace(/[^0-9\\.\\-\\,]+/g, '');\n        b = b.replace(/[^0-9\\.\\-\\,]+/g, '');\n\n        return exports.Sort.Numeric(a, b);\n    },\n\n    Date: (function (_Date) {\n        function Date(_x, _x2) {\n            return _Date.apply(this, arguments);\n        }\n\n        Date.toString = function () {\n            return _Date.toString();\n        };\n\n        return Date;\n    })(function (a, b) {\n        // Note: this function tries to do a standard javascript string -> date conversion\n        // If you need more control over the date string format, consider using a different\n        // date library and writing your own function\n        var valA = Date.parse(a);\n        var valB = Date.parse(b);\n\n        // Handle non-date values with numeric sort\n        // Sort non-numeric values alphabetically at the bottom of the list\n        if (isNaN(valA) || isNaN(valB)) {\n            return exports.Sort.Numeric(a, b);\n        }\n\n        if (valA > valB) {\n            return 1;\n        }\n        if (valB > valA) {\n            return -1;\n        }\n\n        return 0;\n    }),\n\n    CaseInsensitive: function CaseInsensitive(a, b) {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n    }\n};\nexports.Sort = Sort;\n"]},"metadata":{},"sourceType":"script"}